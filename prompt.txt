Help me debug the following:

// // custom_op.cc
#include "tensorflow/core/framework/op.h"
#include "tensorflow/core/framework/op_kernel.h"
#include "tensorflow/core/framework/shape_inference.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/framework/tensor_shape.h"
#include "tensorflow/core/platform/env.h"

using namespace tensorflow;

extern "C" {
void process_strings_wrapper(const char** input, size_t len, int32_t** output, size_t* output_len);
}

REGISTER_OP("ProcessStrings")
    .Input("input: string")
    .Output("output: int32")
    .SetShapeFn([](shape_inference::InferenceContext* c) {
        c->set_output(0, c->MakeShape({c->UnknownDim()}));
        return Status::OK();
    });

class ProcessStringsOp : public OpKernel {
 public:
  explicit ProcessStringsOp(OpKernelConstruction* context) : OpKernel(context) {}

  void Compute(OpKernelContext* context) override {
    const Tensor& input_tensor = context->input(0);
    auto input_flat = input_tensor.flat<tstring>();

    std::vector<const char*> input_strings(input_flat.size());
    for (int i = 0; i < input_flat.size(); ++i) {
      input_strings[i] = input_flat(i).data();
    }

    int32_t* output_data = nullptr;
    size_t output_len = 0;
    process_strings_wrapper(input_strings.data(), input_strings.size(), &output_data, &output_len);    // custom_op.cc (continued)
    Tensor* output_tensor = nullptr;
    TensorShape output_shape({static_cast<int64>(output_len)});
    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output_tensor));

    auto output_flat = output_tensor->flat<int32>();
    std::memcpy(output_flat.data(), output_data, output_len * sizeof(int32));
    free(output_data);
  }
};

REGISTER_KERNEL_BUILDER(Name("ProcessStrings").Device(DEVICE_CPU), ProcessStringsOp);

//src/lib.rs
extern crate libc;
use libc::{c_char, c_int};
use std::ffi::CStr;
use std::str;
use tokenizers::tokenizer::{Tokenizer, EncodeInput};
use tokenizers::InputSequence;

fn process_strings(strings: Vec<String>) -> Result<Vec<Vec<i32>>, String> {
    let tokenizer = Tokenizer::from_pretrained("bert-base-cased", None).map_err(|e| e.to_string())?;
    let inputs: Vec<EncodeInput> = strings
        .iter()
        .map(|s| InputSequence::from(s.to_owned()).into())
        .collect();
    let encodings = tokenizer.encode_batch(inputs, false).unwrap();
    Ok(encodings
        .into_iter()
        .map(|e| e.get_ids().iter().map(|&id| id as i32).collect())
        .collect())
}

#[no_mangle]
pub extern "C" fn process_strings_wrapper(input: *const *const c_char, len: usize, output: *mut *mut c_int, output_len: *mut usize) -> c_int {
    let string_ptrs = unsafe { std::slice::from_raw_parts(input, len) };
    let string_vec: Vec<String> = string_ptrs
        .iter()
        .map(|&ptr| unsafe { CStr::from_ptr(ptr) }.to_string_lossy().into_owned())
        .collect();

    let result = match process_strings(string_vec) {
        Ok(res) => res,
        Err(_) => return -1,
    };

    let flat_result: Vec<i32> = result.into_iter().flatten().collect();
    unsafe {
        *output_len = flat_result.len();
        let output_array = libc::malloc(flat_result.len() * std::mem::size_of::<i32>()) as *mut c_int;
        output_array.copy_from_nonoverlapping(flat_result.as_ptr(), flat_result.len());
        *output = output_array;
    }
    0
}
//main.py
import tensorflow as tf

# Load the compiled shared library containing the custom operation
from tensorflow.python.framework import load_library
from tensorflow.python.platform import resource_loader

custom_op_lib = load_library.load_op_library(
    resource_loader.get_path_to_datafile('custom_op.so'))

# Define a list of input strings
input_strings = [
    "Hello, how are you?",
    "This is a test.",
    "Custom operation in TensorFlow.",
]

# Convert the input strings to a TensorFlow constant tensor
input_tensor = tf.constant(input_strings, dtype=tf.string)

# Call the custom operation 'ProcessStrings'
output_tensor = custom_op_lib.process_strings(input=input_tensor)
print(output_tensor.numpy())


// it prints the 
[]